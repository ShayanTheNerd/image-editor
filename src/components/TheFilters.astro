---
import FilterButton from '@components/FilterButton.astro';
import { imgStore } from '@ts/imgStore.ts';
---

<fieldset>
	<legend>Filters</legend>

	<div tabindex="-1" id="filters_container" class="custom-scrollbar">
		{imgStore.state.filters.map((filter, index: number) => <FilterButton name={filter.name} {index} />)}
	</div>
</fieldset>

<style>
	@import '@styles/tokens/media-queries.css';

	fieldset {
		min-width: 100%;
	}

	legend {
		margin-bottom: var(--1);

		@media (--lg) {
			line-height: 1.75rem;
			font-size: var(--font-xl);
		}
	}

	div {
		width: 100%;
		display: flex;
		gap: var(--2_5);
		outline: none;
		overflow-x: auto;
		border-radius: var(--1);
		scroll-behavior: smooth;

		@media (--md) {
			display: grid;
			grid-template-columns: repeat(4, max-content);
		}
		@media (--lg) {
			padding-bottom: var(--2_5);
		}
	}
</style>

<script>
	import { imgStore } from '@ts/imgStore.ts';
	import { activeFilterClass } from '@ts/constants.ts';
	import { applyFilter } from '@ts/modules/applyFilter.mts';
	import { DOMElements, getActiveFilterBtn } from '@ts/domElements.ts';

	DOMElements.filtersContainer.addEventListener('click', activateNewFilter);

	function activateNewFilter({ target, currentTarget }: Event) {
		if (target === currentTarget) return;

		const activeFilterBtn = getActiveFilterBtn();
		const newFilterBtn = target as HTMLButtonElement & { textContent: string };
		imgStore.activeFilter = newFilterBtn.textContent.toLowerCase().trim();
		activeFilterBtn.classList.remove(activeFilterClass);
		newFilterBtn.classList.add(activeFilterClass);
		newFilterBtn.scrollIntoView({ inline: 'center', behavior: 'smooth' });
		applyFilter({ newFilter: true });
	}
</script>
